# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License. 

#!/usr/bin/env python
# coding: utf-8

from pyspark.sql import SparkSession
import pyspark
from pyspark.ml.classification import MultilayerPerceptronClassifier
from pyspark.ml.evaluation import MulticlassClassificationEvaluator
from pyspark.sql.functions import *
from pyspark.ml.feature import VectorAssembler, StringIndexer,OneHotEncoder
from pyspark.ml.classification import LogisticRegression,                    RandomForestClassifier, GBTClassifier
from pyspark.mllib.evaluation import MulticlassMetrics
from pyspark.sql.types import FloatType
import pyspark.sql.functions as F
from pyspark.ml import Pipeline
from pyspark.ml import PipelineModel
import os
import sys


#Building a Spark session to read and write to and from BigQuery
spark = SparkSession.builder.appName('pyspark-malware-detection-evaluation').config('spark.jars', 'gs://spark-lib/bigquery/spark-bigquery-with-dependencies_2.12-0.22.2.jar').getOrCreate()


#Reading the arguments and storing them in variables
project_name=sys.argv[1]
dataset_name=sys.argv[2]
bucket_name=sys.argv[3]
user_name=sys.argv[4]

#Reading the Random Forest model from GCS
rf_model = PipelineModel.load(os.path.join('gs://'+bucket_name+'/malware_detection/model/final_model_bigquery'))

#Reading the evaluation data to run the model against
eval_df=spark.read.csv("gs://"+bucket_name+"/malware_detection/01-datasets/network_traffic_evaluation_dataset.csv", header=True, inferSchema=True)
predict = rf_model.transform(eval_df)
predict.printSchema()

pred=predict.select('features','rawPrediction','probability','prediction')
pred.show(10)

#Writing the output of the model evaluation to BigQuery
spark.conf.set("parentProject", project_name)
bucket = bucket_name
spark.conf.set("temporaryGcsBucket",bucket)
pred.write.format('bigquery') .mode("overwrite").option('table', project_name+':'+dataset_name+'.'+user_name+'_model_eval_output') .save()

print('Job Completed Successfully!')
